# line numbers
add-highlighter global/ number-lines -hlcursor

# highlight matching parentheses
add-highlighter global/ show-matching

# expand tab
# hook global ModuleLoaded smarttab %{
#     set-option global softtabstop 4
# }
# hook global BufCreate .* expandtab

# use tab to indent line
map global insert <tab> '<a-;><a-gt>'
map global insert <s-tab> '<a-;><a-lt>'

# use tab when completions are shown. revert to normal tab otherwise.
hook global InsertCompletionShow .* %{
    try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
        hook -once -always window InsertCompletionHide .* %{
            unmap window insert <tab> <c-n>
            unmap window insert <s-tab> <c-p>
        }
    }
}

# autoload
evaluate-commands %sh{
    shopt -s nullglob
    for i in $kak_config/myautoload/*.kak; do
        printf 'source "%s"\n' "$i"
        echo "Sourced $i" 1>&2
    done
}

# disable cursor wrap
# hook global NormalKey h %{
#     try %{
#         execute-keys <a-k>$<ret> l
#     }
# }
# 
# hook global NormalKey l %{
#     try %{
#         execute-keys <a-k>^<ret>h
#     }
# }

# set indent width
# hook global BufCreate .* %{
#     set-option buffer indentwidth 2
# }
set-option global indentwidth 2

colorscheme nord

# parinfer
hook global WinSetOption filetype=(clojure|lisp|scheme|racket) %{
    parinfer-enable-window -smart
}

# lsp
eval %sh{kak-lsp --kakoune -s $kak_session}
hook global WinSetOption filetype=(racket|haskell) %{
    lsp-enable-window
    map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
    # map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
    map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
    map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
    map global object e '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
    map global object k '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
    map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
    map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'
}

define-command -params 0..1 delete-buffer-or-quit %{
  evaluate-commands %sh{
    count=0
    eval "buflist=($kak_quoted_buflist)"
    for i in "${buflist[@]}"; do
      case "$i" in
        \*scratch\*) ;;
        \*debug\*) ;;
        *) count=$((count + 1)) ;;
      esac
    done
    if [[ $count -le 1 ]]; then
      echo -n "quit"
    else
      echo -n "delete-buffer"
    fi
    if [[ $1 == -force ]]; then
      echo "!"
    else
      echo
    fi
  }
}

alias global dbq delete-buffer-or-quit

map global normal q :dbq<ret>
map global normal Q :w<ret>:dbq<ret>
map global normal <c-q> :dbq<space>-force<ret>

hook global BufCreate \*make\* %{
  ansi-enable
}
