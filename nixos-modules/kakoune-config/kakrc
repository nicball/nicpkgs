# line numbers
add-highlighter global/ number-lines -hlcursor

# highlight matching parentheses
add-highlighter global/ show-matching

# expand tab
# hook global ModuleLoaded smarttab %{
#     set-option global softtabstop 4
# }
# hook global BufCreate .* expandtab

# use tab to indent line
map global insert <tab> '<a-;><a-gt>'
map global insert <s-tab> '<a-;><a-lt>'

# use tab when completions are shown. revert to normal tab otherwise.
hook global InsertCompletionShow .* %{
  try %{
    # this command temporarily removes cursors preceded by whitespace;
    # if there are no cursors left, it raises an error, does not
    # continue to execute the mapping commands, and the error is eaten
    # by the `try` command so no warning appears.
    execute-keys -draft 'h<a-K>\h<ret>'
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
    hook -once -always window InsertCompletionHide .* %{
      unmap window insert <tab> <c-n>
      unmap window insert <s-tab> <c-p>
    }
  }
}

# disable cursor wrap
# hook global NormalKey h %{
#   try %{
#     execute-keys <a-k>$<ret> l
#   }
# }
# 
# hook global NormalKey l %{
#   try %{
#     execute-keys <a-k>^<ret>h
#   }
# }

# set indent width
# hook global BufCreate .* %{
#   set-option buffer indentwidth 2
# }
set-option global indentwidth 2

colorscheme nord

# parinfer
hook global WinSetOption filetype=(clojure|lisp|scheme|racket) %{
  parinfer-enable-window -smart
}

# lsp
eval %sh{kak-lsp}

hook -group lsp-filetype-c global BufSetOption filetype=(c|cpp) %{
  set-option buffer lsp_servers %{
    [clangd]
    root_globs = [ "compile_commands.json", ".clangd", ".git", ".hg" ]
  }
}

hook -group lsp-filetype-c global BufSetOption filetype=racket %{
  set-option buffer lsp_servers %{
    [racket]
    root_globs = [ ".git" "info.rkt" ]
    args = [ "-l", "racket-langserver" ]
  }
}

hook -group lsp-filetype-c global BufSetOption filetype=haskell %{
  set-option buffer lsp_servers %{
    [haskell]
    root_globs = [ "hie.yaml", "cabal.project", "Setup.hs", "stack.yaml", "*.cabal" ]
    command = "haskell-language-server-wrapper"
    args = [ "--lsp" ]
    settings_section = "haskell"

    [haskell.settings.haskell]
    "haskell.plugin.semanticTokens.globalOn" = true
  }
}

hook -group lsp-filetype-c global BufSetOption filetype=rescript %{
  set-option buffer lsp_servers %{
    [rescript]
    root_globs = [ "packages.json", "rescript.json" ]
    command = "rescript-language-server"
    args = [ "--stdio" ]
  }
}

set-option global lsp_semantic_tokens %{
  [
    {face="documentation", token="comment", modifiers=["documentation"]},
    {face="comment", token="comment"},
    {face="function", token="function"},
    {face="keyword", token="keyword"},
    {face="module", token="namespace"},
    {face="operator", token="operator"},
    {face="string", token="string"},
    {face="type", token="type"},
    {face="+b@variable", token="variable", modifiers=["readonly"]},
    {face="+b@variable", token="variable", modifiers=["constant"]},
    {face="variable", token="variable"},
    {face="+i@keyword", token="modifier"},
    {face="function", token="enumMember"},
    {face="attribute", token="property"},
    {face="type", token="interface"},
    {face="type", token="class"},
  ]
}

hook global WinSetOption filetype=(racket|haskell|rescript|c|cpp) %{
  lsp-enable-window
  lsp-inlay-hints-enable window
  map window user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
  map window object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
  map window object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
  map window object f '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
  map window object k '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
  map window object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
  map window object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'
  map window insert <a-tab> '<a-;>:lsp-snippets-select-next-placeholders<ret>' -docstring 'Select next snippet placeholder'
  # hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
  # hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
  # hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
  hook -once -always window WinSetOption filetype=.* %{
    # remove-hooks window semantic-tokens
    unmap window user l
    map window object a
    map window object <a-a>
    map window object f
    map window object k
    map window object d
    map window object D
    map window insert <a-tab>
  }
}

# smart quit
define-command -params 0..1 delete-buffer-or-quit %{
  evaluate-commands %sh{
    isForce=false
    [ $# -gt 0 ] && [ $1 = -force ] && isForce=true
    eval set -- "$kak_quoted_buflist"
    countReal=0
    case "$kak_bufname" in
      \**\*) currentIsReal=false ;;
      *) currentIsReal=true ;;
    esac
    while [ $# -gt 0 ]; do
      case "$1" in
        \**\*) ;;
        *) countReal=$((countReal + 1)) ;;
      esac
      shift
    done
    if [ $countReal = 0 ] || ([ $countReal = 1 ] && $currentIsReal); then
      printf 'quit'
    else
      printf 'delete-buffer'
    fi
    if $isForce; then
      printf '!'
    fi
  }
}

alias global dbq delete-buffer-or-quit

map global normal q :dbq<ret>
map global normal Q :w<ret>:dbq<ret>
map global normal <c-q> :dbq<space>-force<ret>
map global normal <a-q> :db<ret>
map global normal <a-s-q> :db!<ret>

# color codes for make output
hook global BufCreate \*make\* %{
  ansi-enable
}

# copy to clipboard
define-command copy-selection-to-osc52 %{
  nop %sh{
    printf '\e]52;c;%s\e\\' "$(printf '%s' "$kak_selection" | base64 -w 0)" > /proc/"$kak_client_pid"/fd/1
  }
}
map global normal <a-c> :copy-selection-to-osc52<ret>

# .hsc is haskell too!
hook global BufCreate .*[.](hsc) %{
    set-option buffer filetype haskell
}
